/*
   fskit: a library for creating multi-threaded in-RAM filesystems
   Copyright (C) 2014  Jude Nelson

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef _FSKIT_ROUTE_H_
#define _FSKIT_ROUTE_H_

#include <regex.h>

#include "common.h"
#include "fskit.h"

// prototypes 
struct fskit_core;
struct fskit_dir_entry;

// route match methods 
#define FSKIT_ROUTE_MATCH_CREATE                0
#define FSKIT_ROUTE_MATCH_MKDIR                 1
#define FSKIT_ROUTE_MATCH_MKNOD                 2
#define FSKIT_ROUTE_MATCH_OPEN                  3
#define FSKIT_ROUTE_MATCH_READDIR               4
#define FSKIT_ROUTE_MATCH_READ                  5
#define FSKIT_ROUTE_MATCH_WRITE                 6
#define FSKIT_ROUTE_MATCH_TRUNC                 7
#define FSKIT_ROUTE_MATCH_CLOSE                 8
#define FSKIT_ROUTE_MATCH_DETACH                9
#define FSKIT_ROUTE_NUM_ROUTE_TYPES             10

// route consistency disciplines
#define FSKIT_SEQUENTIAL        0x1
#define FSKIT_CONCURRENT        0x2


// group of matches generated by matching on a path regex,
// from the fskit_route_*() methods
struct fskit_match_group {
   char* path;                  // the path matched
   int argc;                    // number of matches
   char** argv;                 // each matched string in the path regex
};

// method callback signatures to match on path route 
typedef int (*fskit_entry_route_create_callback_t)( struct fskit_core*, struct fskit_match_group*, struct fskit_entry*, int, mode_t, void**, void** );
typedef int (*fskit_entry_route_mknod_callback_t)( struct fskit_core*, struct fskit_match_group*, struct fskit_entry*, mode_t, dev_t, void** );
typedef int (*fskit_entry_route_mkdir_callback_t)( struct fskit_core*, struct fskit_match_group*, struct fskit_entry*, mode_t, void** );
typedef int (*fskit_entry_route_open_callback_t)( struct fskit_core*, struct fskit_match_group*, struct fskit_entry*, int, void** );         // open() and opendir()
typedef int (*fskit_entry_route_close_callback_t)( struct fskit_core*, struct fskit_match_group*, struct fskit_entry*, void* );      // close() and closedir()
typedef int (*fskit_entry_route_io_callback_t)( struct fskit_core*, struct fskit_match_group*, struct fskit_entry*, char*, size_t, off_t );   // read() and write()
typedef int (*fskit_entry_route_trunc_callback_t)( struct fskit_core*, struct fskit_match_group*, struct fskit_entry*, off_t );
typedef int (*fskit_entry_route_readdir_callback_t)( struct fskit_core*, struct fskit_match_group*, struct fskit_entry*, struct fskit_dir_entry* );
typedef int (*fskit_entry_route_detach_callback_t)( struct fskit_core*, struct fskit_match_group*, struct fskit_entry*, void* );             // unlink() and rmdir()

// which method will be called?
union fskit_route_method {
   fskit_entry_route_create_callback_t       create_cb;
   fskit_entry_route_mknod_callback_t        mknod_cb;
   fskit_entry_route_mkdir_callback_t        mkdir_cb;
   fskit_entry_route_open_callback_t         open_cb;
   fskit_entry_route_close_callback_t        close_cb;
   fskit_entry_route_io_callback_t           io_cb;
   fskit_entry_route_trunc_callback_t        trunc_cb;
   fskit_entry_route_readdir_callback_t      readdir_cb;
   fskit_entry_route_detach_callback_t       detach_cb;
};

// a path route 
struct fskit_path_route {
   
   char* path_regex_str;                // string-ified regex
   int num_expected_matches;            // number of expected match groups (upper bound)
   regex_t path_regex;                  // compiled regular expression
   
   int consistency_discipline;          // concurrent or sequential call?
   
   int route_type;                      // one of FSKIT_ROUTE_MATCH_*
   fskit_route_method method;           // which method to call
   
   pthread_rwlock_t lock;               // lock used to enforce the consistency discipline
};


// dispatch arguments 
struct fskit_route_dispatch_args {
   
   int flags;           // create(), open() only 
   
   mode_t mode;         // create(), mknod() only
   dev_t dev;           // mknod() only
   
   void* inode_data;    // create(), mkdir(), unlink(), rmdir() only.  In create() and mkdir(), this is an output value.
   void* handle_data;   // create(), open(), opendir(), close() only.  In open() and opendir(), this is an output value.
   
   char* iobuf;         // read(), write() only.  In read(), this is an output value.
   size_t iolen;        // read(), write() only 
   off_t iooff;         // read(), write(), trunc() only
   
   struct fskit_dir_entry* dent;        // readdir() only
};

// populate route dispatch arguments 
int fskit_route_create_args( struct fskit_route_dispatch_args* dargs, int flags, mode_t mode );
int fskit_route_mknod_args( struct fskit_route_dispatch_args* dargs, mode_t mode, dev_t dev );
int fskit_route_mkdir_args( struct fskit_route_dispatch_args* dargs, mode_t mode );
int fskit_route_open_args( struct fskit_route_dispatch_args* dargs, int flags );
int fskit_route_close_args( struct fskit_route_dispatch_args* dargs, void* handle_data );
int fskit_route_readdir_args( struct fskit_route_dispatch_args* dargs, struct fskit_dir_entry* dent );
int fskit_route_io_args( struct fskit_route_dispatch_args* dargs, char* iobuf, size_t iolen, off_t iooff );
int fskit_route_trunc_args( struct fskit_route_dispatch_args* dargs, off_t iooff );
int fskit_route_detach_args( struct fskit_route_dispatch_args* dargs, void* inode_data );

// call user-supplied routes 
int fskit_route_call_create( struct fskit_core* core, char const* path, struct fskit_entry* fent, struct fskit_route_dispatch_args* dargs, int* cbrc );
int fskit_route_call_mknod( struct fskit_core* core, char const* path, struct fskit_entry* fent, struct fskit_route_dispatch_args* dargs, int* cbrc );
int fskit_route_call_mkdir( struct fskit_core* core, char const* path, struct fskit_entry* fent, struct fskit_route_dispatch_args* dargs, int* cbrc );
int fskit_route_call_open( struct fskit_core* core, char const* path, struct fskit_entry* fent, struct fskit_route_dispatch_args* dargs, int* cbrc );
int fskit_route_call_close( struct fskit_core* core, char const* path, struct fskit_entry* fent, struct fskit_route_dispatch_args* dargs, int* cbrc );
int fskit_route_call_readdir( struct fskit_core* core, char const* path, struct fskit_entry* fent, struct fskit_route_dispatch_args* dargs, int* cbrc );
int fskit_route_call_read( struct fskit_core* core, char const* path, struct fskit_entry* fent, struct fskit_route_dispatch_args* dargs, int* cbrc );
int fskit_route_call_write( struct fskit_core* core, char const* path, struct fskit_entry* fent, struct fskit_route_dispatch_args* dargs, int* cbrc );
int fskit_route_call_trunc( struct fskit_core* core, char const* path, struct fskit_entry* fent, struct fskit_route_dispatch_args* dargs, int* cbrc );
int fskit_route_call_detach( struct fskit_core* core, char const* path, struct fskit_entry* fent, struct fskit_route_dispatch_args* dargs, int* cbrc );

// memory management 
int fskit_path_route_free( struct fskit_path_route* route );

extern "C" { 
   
// define various types of routes 
int fskit_route_create( struct fskit_core* core, char const* route_regex, fskit_entry_route_create_callback_t create_cb, int consistency_discipline );
int fskit_route_mknod( struct fskit_core* core, char const* route_regex, fskit_entry_route_mknod_callback_t create_cb, int consistency_discipline );
int fskit_route_mkdir( struct fskit_core* core, char const* route_regex, fskit_entry_route_mkdir_callback_t mkdir_cb, int consistency_discipline );
int fskit_route_open( struct fskit_core* core, char const* route_regex, fskit_entry_route_open_callback_t open_cb, int consistency_discipline );
int fskit_route_close( struct fskit_core* core, char const* route_regex, fskit_entry_route_close_callback_t close_cb, int consistency_discipline );
int fskit_route_readdir( struct fskit_core* core, char const* route_regex, fskit_entry_route_readdir_callback_t readdir_cb, int consistency_discipline );
int fskit_route_read( struct fskit_core* core, char const* route_regex, fskit_entry_route_io_callback_t io_cb, int consistency_discipline );
int fskit_route_write( struct fskit_core* core, char const* route_regex, fskit_entry_route_io_callback_t io_cb, int consistency_discipline );
int fskit_route_trunc( struct fskit_core* core, char const* route_regex, fskit_entry_route_trunc_callback_t io_cb, int consistency_discipline );
int fskit_route_detach( struct fskit_core* core, char const* route_regex, fskit_entry_route_detach_callback_t detach_cb, int consistency_discipline );

}

#endif
